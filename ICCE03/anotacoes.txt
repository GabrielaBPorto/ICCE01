\begin{resumo}
Tem-se como objetivo apresentar igualdades e diferenças entre duas implementaçõs do métodos de Gauss Jacobi, uma fazendo a utilização de práticas de otiimzação discutidas em aula.
\end{resumo}

\section{funcionamento}
Para rodar o trabalho, use o seguinte comando:
    sudo python3 script.py
Além disso, pode ser necessário realizar update ou instalar as bibliotecas python relevantes (pandas, matplotlib, seaborn, numpy) na máquina onde serão realizados os testes.
\section{funcionamento}

\section{Marcadores}
Foram realizados marcadores para:
\begin{itemize}
    \item A função inteira;
    \item Alocação de memória
    \item Leitura de dados em memória
    \item Para a aplicação do método
    \item Liberação de memória
\end{itemize}

\section{Similaridades}
\begin{itemize}
  \item Ambos realizam uso de variaveis locais, alocadas no inicio das funções, ficam na L1 da cache, ou seja, ficam mais próximo da memória, permitindo menos cache miss.
  \item A leitura dos dois são iguais, visto que não tem muita alterações para ser feitas
\end{itemize}

\section{Diferenças}
\begin{itemize}
  \item Alocação demanda muito tempo, e pode ter a heap comprometida, no código otimizado é feito alocação inicial do ponteiro A[0] separado do resto, e utilizado ele para gerar os seguintes ponteiro de vtores usando o calculo de PAD
    \item Quando realizando a alocação está sendo calculado para fechar mais ocrretamente com o size passado em parametro
    \item A maior diferença entre o gauss não otimizado e otimizado é o fato que ele está fazendo somas por blocos, fazendo com que o for de calculo terá que percorrer n / 4 vezes invés de n
    \item Quando está fazendo acessos para leitura ou escrita de dados, utiliza-se ponteiros realizando acesso direto ao conteudo
    \item Faz a utilização da função memcpy que é modificada para ser o meio mais otimizado de limpar a memória com um dado único em variavel
    \item Não tendo a necessidade de tanto gerenciamento de ponteiro pelo meio de alocação, a liberação de memória mais rapida, considerando-se que todos os nós se baseiam no A[0], faz com que não se tenha necessidade de um loop para a liberação da memória.
\end{itemize}
